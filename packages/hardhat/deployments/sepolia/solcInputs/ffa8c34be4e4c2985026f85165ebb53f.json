{
  "language": "Solidity",
  "sources": {
    "contracts/PiggyBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract PiggyBank {\n    address public owner; // Owner of the piggy bank (could be the contract deployer)\n    uint public lockUpPeriod; // Lock-up period in seconds\n\n    // Struct to represent each user's deposit information\n    struct Deposit {\n        uint amount; // Amount of Ether the user has deposited\n        uint depositTime; // Timestamp of when the deposit was made\n    }\n\n    mapping(address => Deposit) public deposits; // Mapping from user address to their deposit details\n\n    event Deposited(address indexed user, uint amount);\n    event Withdrawn(address indexed user, uint amount);\n\n    // Modifier to ensure only the owner can withdraw or set the lock-up period\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n\n    // Constructor to set the initial owner and the lock-up period\n    constructor(uint _lockUpPeriod) {\n        owner = msg.sender;\n        lockUpPeriod = _lockUpPeriod; // Set the lock-up period (in seconds)\n    }\n\n    // Deposit Ether into the PiggyBank\n    function deposit() external payable {\n        require(msg.value > 0, \"Must send Ether to deposit\");\n\n        Deposit storage userDeposit = deposits[msg.sender];\n\n        // If the user already has a deposit, we just add to it\n        userDeposit.amount += msg.value;\n\n        // If this is the user's first deposit, we set the deposit time\n        if (userDeposit.depositTime == 0) {\n            userDeposit.depositTime = block.timestamp;\n        }\n\n        emit Deposited(msg.sender, msg.value);\n    }\n\n    // Withdraw funds after the lock-up period has passed\n    function withdraw() external {\n        Deposit storage userDeposit = deposits[msg.sender];\n        require(userDeposit.amount > 0, \"No funds to withdraw\");\n        require(block.timestamp >= userDeposit.depositTime + lockUpPeriod, \"Funds are still locked\");\n\n        uint amountToWithdraw = userDeposit.amount;\n        userDeposit.amount = 0; // Reset the user's deposit\n\n        // Transfer the funds back to the user\n        payable(msg.sender).transfer(amountToWithdraw);\n\n        emit Withdrawn(msg.sender, amountToWithdraw);\n    }\n\n    // View the balance of the user's deposit\n    function getDepositBalance(address user) external view returns (uint) {\n        return deposits[user].amount;\n    }\n\n    // View the time at which the user can withdraw their funds\n    function getUnlockTime() external view returns (uint) {\n        return deposits[msg.sender].depositTime + lockUpPeriod;\n    }\n\n    // Owner can update the lock-up period (if desired)\n    function setLockUpPeriod(uint _newLockUpPeriod) external onlyOwner {\n        lockUpPeriod = _newLockUpPeriod;\n    }\n\n    // Owner can withdraw all funds (for example, in case of emergencies)\n    function ownerWithdraw(uint amount) external onlyOwner {\n        require(amount <= address(this).balance, \"Insufficient balance in the contract\");\n        payable(owner).transfer(amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}